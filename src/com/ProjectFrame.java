package com; 

import com.model.InvHeaderTableModel;
import com.model.InvoiceHeader;
import com.model.InvoiceLine;
import com.model.InvLineTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author M E T R O
 */
public class ProjectFrame extends javax.swing.JFrame implements ActionListener, ListSelectionListener{



    /**
     * Creates new form NewJFrame
     */
    public ProjectFrame() {
        initComponents();
   
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        headerTable = new javax.swing.JTable();
        headerTable.getSelectionModel().addListSelectionListener(this);
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        invNumLbl = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        invTotalLbl = new javax.swing.JLabel();
        invDateTF = new javax.swing.JTextField();
        custNameTF = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        lineTable = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        LoadFileMenuItem = new javax.swing.JMenuItem();
        LoadFileMenuItem.setActionCommand("load");
        LoadFileMenuItem.addActionListener(this);
        SaveFileMenuItem = new javax.swing.JMenuItem();
        SaveFileMenuItem.setActionCommand("save");
        SaveFileMenuItem.addActionListener(this);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Invoice Table");

        jButton1.setText("CreateNewInvoice");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Delete Invoice");

        jScrollPane1.setToolTipText("");

        headerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "No.", "Date", "Customer", "Total"
            }
        ));
        headerTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        headerTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        headerTable.setShowVerticalLines(false);
        jScrollPane1.setViewportView(headerTable);
        if (headerTable.getColumnModel().getColumnCount() > 0) {
            headerTable.getColumnModel().getColumn(0).setHeaderValue("No.");
            headerTable.getColumnModel().getColumn(1).setHeaderValue("Date");
            headerTable.getColumnModel().getColumn(2).setHeaderValue("Customer");
            headerTable.getColumnModel().getColumn(3).setHeaderValue("Total");
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(72, 72, 72)
                                .addComponent(jButton1)
                                .addGap(49, 49, 49)
                                .addComponent(jButton2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 92, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(38, 38, 38))
        );

        jScrollPane1.getAccessibleContext().setAccessibleName("");

        jLabel2.setText("Invoice Number");

        invNumLbl.setText("23");

        jLabel3.setText("Invoice Date");

        jLabel4.setText("Customer Name");

        jLabel5.setText("Invoice Total");

        invTotalLbl.setText("350.50");

        custNameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custNameTFActionPerformed(evt);
            }
        });

        lineTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "No.", "Item Name", "Item Price", "Count", "Item Total"
            }
        ));
        lineTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lineTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(lineTable);

        jButton3.setText("Save");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Cancel");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(42, 42, 42)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(invTotalLbl)
                            .addComponent(invNumLbl)
                            .addComponent(invDateTF)
                            .addComponent(custNameTF, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addComponent(jButton3)
                .addGap(83, 83, 83)
                .addComponent(jButton4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(invNumLbl))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(invDateTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(custNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(invTotalLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4)))
        );

        jMenu1.setText("File");

        LoadFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        LoadFileMenuItem.setText("Load File");
        LoadFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadFileMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(LoadFileMenuItem);

        SaveFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        SaveFileMenuItem.setText("Save File");
        SaveFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveFileMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(SaveFileMenuItem);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void LoadFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadFileMenuItemActionPerformed
       
    }//GEN-LAST:event_LoadFileMenuItemActionPerformed

    private void SaveFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveFileMenuItemActionPerformed
        
    }//GEN-LAST:event_SaveFileMenuItemActionPerformed

    private void custNameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_custNameTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_custNameTFActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProjectFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProjectFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProjectFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProjectFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProjectFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem LoadFileMenuItem;
    private javax.swing.JMenuItem SaveFileMenuItem;
    private javax.swing.JTextField custNameTF;
    private javax.swing.JTable headerTable;
    private javax.swing.JTextField invDateTF;
    private javax.swing.JLabel invNumLbl;
    private javax.swing.JLabel invTotalLbl;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable lineTable;
    // End of variables declaration//GEN-END:variables

    private ArrayList<InvoiceHeader> invoices = new ArrayList<>();
    private ArrayList<InvoiceLine> invoiceLines = new ArrayList<>();
    private InvHeaderTableModel headerTableModel;
    private InvLineTableModel lineTableModel;
    private SimpleDateFormat df = new SimpleDateFormat("dd-mm-yyyy");
    private InvHeaderDialog headerDialog;
    private InvLineDialog lineDialog;
    
    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getActionCommand().equals("load")){     
        try {
           loadFile();
          } catch (Exception ex) {ex.printStackTrace();}
          
        }else if (e.getActionCommand().equals("save")){
        try {
            saveData();
            } catch (Exception ex) {ex.printStackTrace();}
        
        }else if(e.getActionCommand().equals("CreateInv")){
        try {
            createInv();
            } catch (Exception ex) {ex.printStackTrace();}
        
        }else if(e.getActionCommand().equals("DeleteInv")){
        try {
            deleteInv();
            } catch (Exception ex) {ex.printStackTrace();}
        
        }else if(e.getActionCommand().equals("CreateItem")){
        try {
            createItem();
            } catch (Exception ex) {ex.printStackTrace();}
        
        }else if(e.getActionCommand().equals("DeleteItem")){
        try {
            deleteItem();
            } catch (Exception ex) {ex.printStackTrace();}
        
        }else if(e.getActionCommand().equals("CreateInvOk")){
        try {
             createInvOk();       
        } catch (Exception ex) {ex.printStackTrace();}
        
        }else if(e.getActionCommand().equals("CreateInvCancel")){
        try {
             createInvCancel();
            } catch (Exception ex) {ex.printStackTrace();}
        }
           else if(e.getActionCommand().equals("CreateLineOk")){
        try {
             createLineOk();       
        } catch (Exception ex) {ex.printStackTrace();}
        
        }else if(e.getActionCommand().equals("CreateLineCancel")){
        try {
             createLineCancel();
            } catch (Exception ex) {ex.printStackTrace();}
        }   
    
    }
    
    private void loadFile() throws Exception{
        invoices.clear();
        
        JOptionPane.showMessageDialog(this,"Please Select Invoice Header File","Invoice Header", JOptionPane.WARNING_MESSAGE);
        JFileChooser fc = new JFileChooser();
        int option = fc.showOpenDialog(this);
        if(option == JFileChooser.APPROVE_OPTION){
           File selectedFile = fc.getSelectedFile();
            FileReader fr = new FileReader(selectedFile);
            BufferedReader br = new BufferedReader(fr);
            String line = null;
            while((line = br.readLine())!= null){
               String [] headerSegments = line.split(",");
               String invNumStr = headerSegments[0];
               String invDateStr = headerSegments[1];
               String custName = headerSegments[2];
               int invNum = Integer.parseInt(invNumStr);
               Date invDate = df.parse(invDateStr);
               InvoiceHeader header = new InvoiceHeader(invNum, invDate, custName);
               invoices.add(header);
               
            }
            br.close();
            fr.close();
            
            System.out.println("check");
           
            JOptionPane.showMessageDialog(this,"Please Select Invoice line File","Invoice Lines", JOptionPane.WARNING_MESSAGE);
            
             option = fc.showOpenDialog(this);
           if(option == JFileChooser.APPROVE_OPTION){
            selectedFile = fc.getSelectedFile();
             fr = new FileReader(selectedFile);
             br = new BufferedReader(fr);
             
             line = null;
            while((line = br.readLine())!= null){
               String [] lineSegments = line.split(",");
               String invNumStr = lineSegments[0];
               String item = lineSegments[1];
               String priceStr = lineSegments[2];
               String countStr = lineSegments[3];
               int invNum = Integer.parseInt(invNumStr);
               double price = Double.parseDouble(priceStr);
               int count = Integer.parseInt(countStr);
               InvoiceHeader header = findByNum(invNum);
               InvoiceLine invline = new InvoiceLine(item, price, count, header);
               header.addLine(invline); 
            }
            br.close();
            fr.close();
               InvHeaderTableModel headerModel = new InvHeaderTableModel(invoices);
               headerTable.setModel(headerModel);
               headerTable.validate();
           }  
            
        }
    }
    
    private void saveData(){ 
    }
    
    private InvoiceHeader findByNum(int num){
     
        for(InvoiceHeader header : invoices){
        
            if (header.getInvNum() == num){
              
                return header;
            }  
        }
          return null;    
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        headerTableRowSelected();
    }
    
    

    private void headerTableRowSelected() {
        
       int selectedRowIndex = headerTable.getSelectedRow();
       if(selectedRowIndex >= 0){
          headerTableModel = new InvHeaderTableModel(invoices); 
       InvoiceHeader row = headerTableModel.getInvoices().get(selectedRowIndex);
       
       custNameTF.setText(row.getCustName());
       invDateTF.setText(row.getInvDate().toString());
       invNumLbl.setText("" + row.getInvNum());
       invTotalLbl.setText("" + row.getInvTotal());
       ArrayList<InvoiceLine> lines = row.getLines();
     
       lineTableModel = new InvLineTableModel(lines);
       lineTable.setModel(lineTableModel);
       lineTableModel.fireTableDataChanged();
       }   
    }

    private void createInv() {
        headerDialog = new InvHeaderDialog(this);
        headerDialog.setVisible(true);
        
        
    }

    private void deleteInv() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void createItem() {
        lineDialog = new InvLineDialog(this);
        lineDialog.setVisible(true);
    }

    private void deleteItem() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void createInvOk() {
        String custName = headerDialog.getCustNameField().getText();
        String invDateStr = headerDialog.getInvDateField().getText();
        Date invDate = new Date();
        
        try{
        
            invDate = df.parse(invDateStr);
        
        } catch (ParseException ex){
        
        }
         headerDialog.setVisible(false);
         int num = getMaxInvNum()+ 1;
         InvoiceHeader newInvHeader = new InvoiceHeader(num, invDate, custName);
         invoices.add(newInvHeader);
         headerTableModel.fireTableDataChanged();
         
    }

    private void createInvCancel() {
        headerDialog.setVisible(false);
    }
      
    private int getMaxInvNum(){
         int num = 0;
       for(InvoiceHeader header : invoices){
          
          if(header.getInvNum() > num){
              num = header.getInvNum();
          }  
       }  
         return num;
    }

    private void createLineOk() {
        String itemName = lineDialog.getItemNameField().getText();
        String itemCountStr = lineDialog.getItemCountField().getText();
        String itemPriceStr = lineDialog.getItemPriceField().getText();
        lineDialog.setVisible(false);
        
        int itemCount = Integer.parseInt(itemCountStr);
       double itemPrice = Double.parseDouble(itemPriceStr);
         
        InvoiceHeader invoiceHeader = invoices.get(headerTable.getSelectedRow());
        
        InvoiceLine line = new InvoiceLine(itemName, itemPrice, itemCount, invoiceHeader);
        invoiceHeader.addLine(line);
       
        lineTableModel.fireTableDataChanged();
        headerTableModel.fireTableDataChanged();
        
    }

    private void createLineCancel() {
        lineDialog.setVisible(false);
    }

}
